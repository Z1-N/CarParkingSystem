
CAR_PARK_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001844  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08001950  08001950  00002950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019a8  080019a8  00003010  2**0
                  CONTENTS
  4 .ARM          00000008  080019a8  080019a8  000029a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080019b0  080019b0  00003010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019b0  080019b0  000029b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080019b4  080019b4  000029b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080019b8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000010  080019c8  00003010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  080019c8  00003030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003277  00000000  00000000  00003039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001280  00000000  00000000  000062b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004b8  00000000  00000000  00007530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000363  00000000  00000000  000079e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b97  00000000  00000000  00007d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006025  00000000  00000000  0001e8e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f886  00000000  00000000  00024907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a418d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001050  00000000  00000000  000a41d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000a5220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08001938 	.word	0x08001938

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08001938 	.word	0x08001938

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Display_Startup>:
	  }
      }



  void Display_Startup(int brightness) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
      tm1637_THEDisplayer("G01", brightness);
 8000164:	6879      	ldr	r1, [r7, #4]
 8000166:	4805      	ldr	r0, [pc, #20]	@ (800017c <Display_Startup+0x20>)
 8000168:	f000 fb08 	bl	800077c <tm1637_THEDisplayer>
      HAL_Delay(4000);
 800016c:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000170:	f000 fd1c 	bl	8000bac <HAL_Delay>
  }
 8000174:	bf00      	nop
 8000176:	3708      	adds	r7, #8
 8000178:	46bd      	mov	sp, r7
 800017a:	bd80      	pop	{r7, pc}
 800017c:	08001980 	.word	0x08001980

08000180 <tm1637_CLKhigh>:

extern uint32_t Timer1;
extern uint8_t CurrentDisplay[4];
extern uint8_t tm1637_Segments[8];
void tm1637_CLKhigh()
{																	  	//SCL high period
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);		  	//Setting SCL frequency
 8000184:	2201      	movs	r2, #1
 8000186:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800018a:	4808      	ldr	r0, [pc, #32]	@ (80001ac <tm1637_CLKhigh+0x2c>)
 800018c:	f000 ffb1 	bl	80010f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8000190:	2201      	movs	r2, #1
 8000192:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000196:	4805      	ldr	r0, [pc, #20]	@ (80001ac <tm1637_CLKhigh+0x2c>)
 8000198:	f000 ffab 	bl	80010f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 800019c:	2201      	movs	r2, #1
 800019e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001a2:	4802      	ldr	r0, [pc, #8]	@ (80001ac <tm1637_CLKhigh+0x2c>)
 80001a4:	f000 ffa5 	bl	80010f2 <HAL_GPIO_WritePin>
}
 80001a8:	bf00      	nop
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	40010c00 	.word	0x40010c00

080001b0 <tm1637_CLKlow>:
void tm1637_CLKlow()
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);		//SCL low period
 80001b4:	2200      	movs	r2, #0
 80001b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001ba:	4808      	ldr	r0, [pc, #32]	@ (80001dc <tm1637_CLKlow+0x2c>)
 80001bc:	f000 ff99 	bl	80010f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001c6:	4805      	ldr	r0, [pc, #20]	@ (80001dc <tm1637_CLKlow+0x2c>)
 80001c8:	f000 ff93 	bl	80010f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001d2:	4802      	ldr	r0, [pc, #8]	@ (80001dc <tm1637_CLKlow+0x2c>)
 80001d4:	f000 ff8d 	bl	80010f2 <HAL_GPIO_WritePin>
}
 80001d8:	bf00      	nop
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	40010c00 	.word	0x40010c00

080001e0 <tm1637_SDOhigh>:
void tm1637_SDOhigh()
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);			//SDO high period
 80001e4:	2201      	movs	r2, #1
 80001e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80001ea:	4808      	ldr	r0, [pc, #32]	@ (800020c <tm1637_SDOhigh+0x2c>)
 80001ec:	f000 ff81 	bl	80010f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 80001f0:	2201      	movs	r2, #1
 80001f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80001f6:	4805      	ldr	r0, [pc, #20]	@ (800020c <tm1637_SDOhigh+0x2c>)
 80001f8:	f000 ff7b 	bl	80010f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000202:	4802      	ldr	r0, [pc, #8]	@ (800020c <tm1637_SDOhigh+0x2c>)
 8000204:	f000 ff75 	bl	80010f2 <HAL_GPIO_WritePin>
}
 8000208:	bf00      	nop
 800020a:	bd80      	pop	{r7, pc}
 800020c:	40010c00 	.word	0x40010c00

08000210 <tm1637_SDOlow>:
void tm1637_SDOlow()
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);			//SDO low period
 8000214:	2200      	movs	r2, #0
 8000216:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800021a:	4808      	ldr	r0, [pc, #32]	@ (800023c <tm1637_SDOlow+0x2c>)
 800021c:	f000 ff69 	bl	80010f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 8000220:	2200      	movs	r2, #0
 8000222:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000226:	4805      	ldr	r0, [pc, #20]	@ (800023c <tm1637_SDOlow+0x2c>)
 8000228:	f000 ff63 	bl	80010f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 800022c:	2200      	movs	r2, #0
 800022e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000232:	4802      	ldr	r0, [pc, #8]	@ (800023c <tm1637_SDOlow+0x2c>)
 8000234:	f000 ff5d 	bl	80010f2 <HAL_GPIO_WritePin>
}
 8000238:	bf00      	nop
 800023a:	bd80      	pop	{r7, pc}
 800023c:	40010c00 	.word	0x40010c00

08000240 <tm1637_StartPacket>:
void tm1637_StartPacket()												//Lower SDO line while CLK line is high
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	tm1637_CLKhigh();
 8000244:	f7ff ff9c 	bl	8000180 <tm1637_CLKhigh>

	tm1637_SDOhigh();
 8000248:	f7ff ffca 	bl	80001e0 <tm1637_SDOhigh>
	tm1637_SDOlow();
 800024c:	f7ff ffe0 	bl	8000210 <tm1637_SDOlow>

	tm1637_CLKlow();
 8000250:	f7ff ffae 	bl	80001b0 <tm1637_CLKlow>
}
 8000254:	bf00      	nop
 8000256:	bd80      	pop	{r7, pc}

08000258 <tm1637_EndPacket>:
void tm1637_EndPacket()													//SDO line is pulled high while SCL line is high
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	tm1637_CLKlow();
 800025c:	f7ff ffa8 	bl	80001b0 <tm1637_CLKlow>
	tm1637_SDOlow();
 8000260:	f7ff ffd6 	bl	8000210 <tm1637_SDOlow>

	tm1637_CLKhigh();
 8000264:	f7ff ff8c 	bl	8000180 <tm1637_CLKhigh>
	tm1637_SDOhigh();
 8000268:	f7ff ffba 	bl	80001e0 <tm1637_SDOhigh>
}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}

08000270 <tm1637_DataOut>:
void tm1637_DataOut(uint8_t *tm1637_TxBuffer)							//Low level data transfer function
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]

	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 8000278:	2300      	movs	r3, #0
 800027a:	73fb      	strb	r3, [r7, #15]
 800027c:	e015      	b.n	80002aa <tm1637_DataOut+0x3a>
	{
		tm1637_CLKlow();
 800027e:	f7ff ff97 	bl	80001b0 <tm1637_CLKlow>
		if(tm1637_TxBuffer[j] == GPIO_PIN_SET)							//Check logic level
 8000282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000286:	687a      	ldr	r2, [r7, #4]
 8000288:	4413      	add	r3, r2
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	2b01      	cmp	r3, #1
 800028e:	d102      	bne.n	8000296 <tm1637_DataOut+0x26>
		{
			tm1637_SDOhigh();
 8000290:	f7ff ffa6 	bl	80001e0 <tm1637_SDOhigh>
 8000294:	e001      	b.n	800029a <tm1637_DataOut+0x2a>

		}
		else
		{
			tm1637_SDOlow();
 8000296:	f7ff ffbb 	bl	8000210 <tm1637_SDOlow>

		}
		tm1637_CLKhigh();
 800029a:	f7ff ff71 	bl	8000180 <tm1637_CLKhigh>
	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 800029e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	3301      	adds	r3, #1
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	73fb      	strb	r3, [r7, #15]
 80002aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80002ae:	2b07      	cmp	r3, #7
 80002b0:	dde5      	ble.n	800027e <tm1637_DataOut+0xe>
	}
}
 80002b2:	bf00      	nop
 80002b4:	bf00      	nop
 80002b6:	3710      	adds	r7, #16
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <tm1637_TxCommand>:
void tm1637_TxCommand(uint8_t *Command)
{																		//Handles high level (bit by bit) transmission operation
 80002bc:	b580      	push	{r7, lr}
 80002be:	b086      	sub	sp, #24
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
	uint8_t ByteData[8] = {0};
 80002c4:	2300      	movs	r3, #0
 80002c6:	60fb      	str	r3, [r7, #12]
 80002c8:	2300      	movs	r3, #0
 80002ca:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 80002cc:	2300      	movs	r3, #0
 80002ce:	75fb      	strb	r3, [r7, #23]
 80002d0:	e014      	b.n	80002fc <tm1637_TxCommand+0x40>
	{

		ByteData[i] = (Command[0] & (0x01 << i)) && 1;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	461a      	mov	r2, r3
 80002d8:	7dfb      	ldrb	r3, [r7, #23]
 80002da:	fa42 f303 	asr.w	r3, r2, r3
 80002de:	f003 0301 	and.w	r3, r3, #1
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	bf14      	ite	ne
 80002e6:	2301      	movne	r3, #1
 80002e8:	2300      	moveq	r3, #0
 80002ea:	b2da      	uxtb	r2, r3
 80002ec:	7dfb      	ldrb	r3, [r7, #23]
 80002ee:	3318      	adds	r3, #24
 80002f0:	443b      	add	r3, r7
 80002f2:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 80002f6:	7dfb      	ldrb	r3, [r7, #23]
 80002f8:	3301      	adds	r3, #1
 80002fa:	75fb      	strb	r3, [r7, #23]
 80002fc:	7dfb      	ldrb	r3, [r7, #23]
 80002fe:	2b07      	cmp	r3, #7
 8000300:	d9e7      	bls.n	80002d2 <tm1637_TxCommand+0x16>

																		//Convert from byte to bit per array element
	}

	tm1637_StartPacket();												//Send start packet bit
 8000302:	f7ff ff9d 	bl	8000240 <tm1637_StartPacket>
	tm1637_DataOut(ByteData);											//Send one byte
 8000306:	f107 030c 	add.w	r3, r7, #12
 800030a:	4618      	mov	r0, r3
 800030c:	f7ff ffb0 	bl	8000270 <tm1637_DataOut>
	tm1637_CLKlow();													//Send one CLK for acknowledgment
 8000310:	f7ff ff4e 	bl	80001b0 <tm1637_CLKlow>
	tm1637_CLKhigh();
 8000314:	f7ff ff34 	bl	8000180 <tm1637_CLKhigh>
	tm1637_ACKcheck();													//wait for acknowledgment.
 8000318:	f000 f87e 	bl	8000418 <tm1637_ACKcheck>
	if((Command[0] & 0xC0) != (0xC0))										//Check if the received packet is not an address.
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000324:	2bc0      	cmp	r3, #192	@ 0xc0
 8000326:	d001      	beq.n	800032c <tm1637_TxCommand+0x70>
	{
		tm1637_EndPacket();
 8000328:	f7ff ff96 	bl	8000258 <tm1637_EndPacket>
	}

}
 800032c:	bf00      	nop
 800032e:	3718      	adds	r7, #24
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}

08000334 <tm1637_TxData>:
void tm1637_TxData(uint8_t *Data, uint8_t PacketSize)
{																		//Handles high level (bit by bit) transmission operation
 8000334:	b580      	push	{r7, lr}
 8000336:	b086      	sub	sp, #24
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	70fb      	strb	r3, [r7, #3]
	uint8_t ByteData[8] = {0};
 8000340:	2300      	movs	r3, #0
 8000342:	60fb      	str	r3, [r7, #12]
 8000344:	2300      	movs	r3, #0
 8000346:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < PacketSize; i++)
 8000348:	2300      	movs	r3, #0
 800034a:	75fb      	strb	r3, [r7, #23]
 800034c:	e02a      	b.n	80003a4 <tm1637_TxData+0x70>
	{
		for(uint8_t j = 0; j < 8; j++)
 800034e:	2300      	movs	r3, #0
 8000350:	75bb      	strb	r3, [r7, #22]
 8000352:	e016      	b.n	8000382 <tm1637_TxData+0x4e>
		{
			ByteData[j] = (Data[i] & (0x01 << j)) && 1;
 8000354:	7dfb      	ldrb	r3, [r7, #23]
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	4413      	add	r3, r2
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	461a      	mov	r2, r3
 800035e:	7dbb      	ldrb	r3, [r7, #22]
 8000360:	fa42 f303 	asr.w	r3, r2, r3
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	2b00      	cmp	r3, #0
 800036a:	bf14      	ite	ne
 800036c:	2301      	movne	r3, #1
 800036e:	2300      	moveq	r3, #0
 8000370:	b2da      	uxtb	r2, r3
 8000372:	7dbb      	ldrb	r3, [r7, #22]
 8000374:	3318      	adds	r3, #24
 8000376:	443b      	add	r3, r7
 8000378:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t j = 0; j < 8; j++)
 800037c:	7dbb      	ldrb	r3, [r7, #22]
 800037e:	3301      	adds	r3, #1
 8000380:	75bb      	strb	r3, [r7, #22]
 8000382:	7dbb      	ldrb	r3, [r7, #22]
 8000384:	2b07      	cmp	r3, #7
 8000386:	d9e5      	bls.n	8000354 <tm1637_TxData+0x20>
		}
		tm1637_DataOut(ByteData);
 8000388:	f107 030c 	add.w	r3, r7, #12
 800038c:	4618      	mov	r0, r3
 800038e:	f7ff ff6f 	bl	8000270 <tm1637_DataOut>
		tm1637_CLKlow();
 8000392:	f7ff ff0d 	bl	80001b0 <tm1637_CLKlow>
		tm1637_CLKhigh();
 8000396:	f7ff fef3 	bl	8000180 <tm1637_CLKhigh>
		tm1637_ACKcheck();												//Transmit byte by byte
 800039a:	f000 f83d 	bl	8000418 <tm1637_ACKcheck>
	for(uint8_t i = 0; i < PacketSize; i++)
 800039e:	7dfb      	ldrb	r3, [r7, #23]
 80003a0:	3301      	adds	r3, #1
 80003a2:	75fb      	strb	r3, [r7, #23]
 80003a4:	7dfa      	ldrb	r2, [r7, #23]
 80003a6:	78fb      	ldrb	r3, [r7, #3]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	d3d0      	bcc.n	800034e <tm1637_TxData+0x1a>

	}
	tm1637_EndPacket();													//Send end packet at the end of data transmission.
 80003ac:	f7ff ff54 	bl	8000258 <tm1637_EndPacket>


}
 80003b0:	bf00      	nop
 80003b2:	3718      	adds	r7, #24
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <tm1637_Initialize>:
void tm1637_Initialize(uint8_t Direction)								//Since SDI line is doing both transmission and reception
{																		//the corresponding GPIO pin must be reinitialized on the run
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b086      	sub	sp, #24
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};								//To read ACK from TM1637 and to write data to it
 80003c2:	f107 0308 	add.w	r3, r7, #8
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = SCLK_Pin;
 80003d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003d4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	2300      	movs	r3, #0
 80003d8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003da:	2302      	movs	r3, #2
 80003dc:	617b      	str	r3, [r7, #20]
	switch (Direction)													//Depending on the function input initialize the pin as input or output
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d00a      	beq.n	80003fa <tm1637_Initialize+0x42>
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d111      	bne.n	800040c <tm1637_Initialize+0x54>
	{
		case DISPLAY2STM:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003ec:	f107 0308 	add.w	r3, r7, #8
 80003f0:	4619      	mov	r1, r3
 80003f2:	4808      	ldr	r0, [pc, #32]	@ (8000414 <tm1637_Initialize+0x5c>)
 80003f4:	f000 fce2 	bl	8000dbc <HAL_GPIO_Init>
			break;
 80003f8:	e008      	b.n	800040c <tm1637_Initialize+0x54>
		case STM2DISPLAY:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fa:	2301      	movs	r3, #1
 80003fc:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003fe:	f107 0308 	add.w	r3, r7, #8
 8000402:	4619      	mov	r1, r3
 8000404:	4803      	ldr	r0, [pc, #12]	@ (8000414 <tm1637_Initialize+0x5c>)
 8000406:	f000 fcd9 	bl	8000dbc <HAL_GPIO_Init>
			break;
 800040a:	bf00      	nop

	}

}
 800040c:	bf00      	nop
 800040e:	3718      	adds	r7, #24
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40011400 	.word	0x40011400

08000418 <tm1637_ACKcheck>:
void tm1637_ACKcheck()
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
	//Wait for acknowledgment bit
	tm1637_Initialize(DISPLAY2STM);										//initialize pin as input
 800041c:	2001      	movs	r0, #1
 800041e:	f7ff ffcb 	bl	80003b8 <tm1637_Initialize>
	tm1637_CLKlow();													//lower CLK line
 8000422:	f7ff fec5 	bl	80001b0 <tm1637_CLKlow>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 8000426:	e002      	b.n	800042e <tm1637_ACKcheck+0x16>
	tm1637_Initialize(STM2DISPLAY);										//initialize pin as output for data transfer
 8000428:	2000      	movs	r0, #0
 800042a:	f7ff ffc5 	bl	80003b8 <tm1637_Initialize>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 800042e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000432:	4804      	ldr	r0, [pc, #16]	@ (8000444 <tm1637_ACKcheck+0x2c>)
 8000434:	f000 fe46 	bl	80010c4 <HAL_GPIO_ReadPin>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d1f4      	bne.n	8000428 <tm1637_ACKcheck+0x10>
}
 800043e:	bf00      	nop
 8000440:	bf00      	nop
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40010c00 	.word	0x40010c00

08000448 <tm1637_DisplayHandle>:
	tm1637_TxData(EmptyBuffer, 4);
	CommandCarrier[0] = DISPLAY_OFF;
	tm1637_TxCommand(CommandCarrier);
}
uint8_t tm1637_DisplayHandle(uint8_t Brightness, uint8_t *DisplayBuffer)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	6039      	str	r1, [r7, #0]
 8000452:	71fb      	strb	r3, [r7, #7]
	//This function handles the low level protocol used to set data address of TM1637 and turn the display on
	//#param Brightness is used to set the brightness level of the display. This function accepts Brightness value between 0 and 7
	//#param *DisplayBuffer is the buffer used to map data from the RAM to the display each element corresponds to one segment in the display
	uint8_t CommandCarrier[1] = {0};
 8000454:	2300      	movs	r3, #0
 8000456:	733b      	strb	r3, [r7, #12]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 8000458:	2301      	movs	r3, #1
 800045a:	73fb      	strb	r3, [r7, #15]
	if(Brightness <= 7)												//there are 7 levels of brightness
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	2b07      	cmp	r3, #7
 8000460:	d819      	bhi.n	8000496 <tm1637_DisplayHandle+0x4e>
	{
	  CommandCarrier[0] = DATA_SET;									//Send set data command
 8000462:	2340      	movs	r3, #64	@ 0x40
 8000464:	733b      	strb	r3, [r7, #12]
	  tm1637_TxCommand(CommandCarrier);
 8000466:	f107 030c 	add.w	r3, r7, #12
 800046a:	4618      	mov	r0, r3
 800046c:	f7ff ff26 	bl	80002bc <tm1637_TxCommand>
	  CommandCarrier[0] = C0H;										//Set address
 8000470:	23c0      	movs	r3, #192	@ 0xc0
 8000472:	733b      	strb	r3, [r7, #12]
	  tm1637_TxCommand(CommandCarrier);
 8000474:	f107 030c 	add.w	r3, r7, #12
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff ff1f 	bl	80002bc <tm1637_TxCommand>

	  tm1637_TxData(DisplayBuffer, 4);								//Map the data stored in RAM to the display
 800047e:	2104      	movs	r1, #4
 8000480:	6838      	ldr	r0, [r7, #0]
 8000482:	f7ff ff57 	bl	8000334 <tm1637_TxData>
	  tm1637_SetBrighness(Brightness);								//Turn on display and set brightness
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	4618      	mov	r0, r3
 800048a:	f000 f809 	bl	80004a0 <tm1637_SetBrighness>
		ParameterFalidation = TM1637_OK;
 800048e:	2300      	movs	r3, #0
 8000490:	73fb      	strb	r3, [r7, #15]
		return ParameterFalidation;
 8000492:	7bfb      	ldrb	r3, [r7, #15]
 8000494:	e000      	b.n	8000498 <tm1637_DisplayHandle+0x50>
	}
	return ParameterFalidation;
 8000496:	7bfb      	ldrb	r3, [r7, #15]
}
 8000498:	4618      	mov	r0, r3
 800049a:	3710      	adds	r7, #16
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}

080004a0 <tm1637_SetBrighness>:
tm1637_StatusTypedef tm1637_SetBrighness(uint8_t BrighnessLevel)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
	uint8_t BrighnessBuffer[8] = {0};
 80004aa:	2300      	movs	r3, #0
 80004ac:	60fb      	str	r3, [r7, #12]
 80004ae:	2300      	movs	r3, #0
 80004b0:	613b      	str	r3, [r7, #16]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 80004b2:	2301      	movs	r3, #1
 80004b4:	75bb      	strb	r3, [r7, #22]
	if(BrighnessLevel <= 7)												//there are 7 levels of brightness
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	2b07      	cmp	r3, #7
 80004ba:	d82f      	bhi.n	800051c <tm1637_SetBrighness+0x7c>
	{																	//Any value above that will be ignored.
		BrighnessLevel = BrighnessLevel | DISPLAY_ON;					//Set Brightness level with display on command
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	f063 0377 	orn	r3, r3, #119	@ 0x77
 80004c2:	71fb      	strb	r3, [r7, #7]

		for(uint8_t i = 0; i < 8; i++)
 80004c4:	2300      	movs	r3, #0
 80004c6:	75fb      	strb	r3, [r7, #23]
 80004c8:	e012      	b.n	80004f0 <tm1637_SetBrighness+0x50>
		{
			BrighnessBuffer[i] = (BrighnessLevel & (0x01 << i)) && 1;
 80004ca:	79fa      	ldrb	r2, [r7, #7]
 80004cc:	7dfb      	ldrb	r3, [r7, #23]
 80004ce:	fa42 f303 	asr.w	r3, r2, r3
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	bf14      	ite	ne
 80004da:	2301      	movne	r3, #1
 80004dc:	2300      	moveq	r3, #0
 80004de:	b2da      	uxtb	r2, r3
 80004e0:	7dfb      	ldrb	r3, [r7, #23]
 80004e2:	3318      	adds	r3, #24
 80004e4:	443b      	add	r3, r7
 80004e6:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t i = 0; i < 8; i++)
 80004ea:	7dfb      	ldrb	r3, [r7, #23]
 80004ec:	3301      	adds	r3, #1
 80004ee:	75fb      	strb	r3, [r7, #23]
 80004f0:	7dfb      	ldrb	r3, [r7, #23]
 80004f2:	2b07      	cmp	r3, #7
 80004f4:	d9e9      	bls.n	80004ca <tm1637_SetBrighness+0x2a>
		}
		tm1637_StartPacket();
 80004f6:	f7ff fea3 	bl	8000240 <tm1637_StartPacket>
		tm1637_DataOut(BrighnessBuffer);
 80004fa:	f107 030c 	add.w	r3, r7, #12
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff feb6 	bl	8000270 <tm1637_DataOut>
		tm1637_CLKlow();													//Send one CLK for acknowledgment
 8000504:	f7ff fe54 	bl	80001b0 <tm1637_CLKlow>
		tm1637_CLKhigh();
 8000508:	f7ff fe3a 	bl	8000180 <tm1637_CLKhigh>
		tm1637_ACKcheck();													//wait for acknowledgment.
 800050c:	f7ff ff84 	bl	8000418 <tm1637_ACKcheck>
		tm1637_EndPacket();
 8000510:	f7ff fea2 	bl	8000258 <tm1637_EndPacket>
		ParameterFalidation = TM1637_OK;
 8000514:	2300      	movs	r3, #0
 8000516:	75bb      	strb	r3, [r7, #22]
		return ParameterFalidation;
 8000518:	7dbb      	ldrb	r3, [r7, #22]
 800051a:	e000      	b.n	800051e <tm1637_SetBrighness+0x7e>
	}
	return ParameterFalidation;
 800051c:	7dbb      	ldrb	r3, [r7, #22]
}
 800051e:	4618      	mov	r0, r3
 8000520:	3718      	adds	r7, #24
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <char2segments>:
		  }

	  }
}

uint8_t char2segments(char c) {
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
        switch (c) {
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	3b20      	subs	r3, #32
 8000536:	2b5a      	cmp	r3, #90	@ 0x5a
 8000538:	f200 811a 	bhi.w	8000770 <char2segments+0x248>
 800053c:	a201      	add	r2, pc, #4	@ (adr r2, 8000544 <char2segments+0x1c>)
 800053e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000542:	bf00      	nop
 8000544:	080006e9 	.word	0x080006e9
 8000548:	08000771 	.word	0x08000771
 800054c:	08000771 	.word	0x08000771
 8000550:	08000771 	.word	0x08000771
 8000554:	08000771 	.word	0x08000771
 8000558:	08000771 	.word	0x08000771
 800055c:	08000771 	.word	0x08000771
 8000560:	08000771 	.word	0x08000771
 8000564:	08000771 	.word	0x08000771
 8000568:	08000771 	.word	0x08000771
 800056c:	080006e5 	.word	0x080006e5
 8000570:	08000771 	.word	0x08000771
 8000574:	08000771 	.word	0x08000771
 8000578:	080006e1 	.word	0x080006e1
 800057c:	08000771 	.word	0x08000771
 8000580:	08000771 	.word	0x08000771
 8000584:	080006b1 	.word	0x080006b1
 8000588:	080006b5 	.word	0x080006b5
 800058c:	080006b9 	.word	0x080006b9
 8000590:	080006bd 	.word	0x080006bd
 8000594:	080006c1 	.word	0x080006c1
 8000598:	080006c5 	.word	0x080006c5
 800059c:	080006c9 	.word	0x080006c9
 80005a0:	080006cd 	.word	0x080006cd
 80005a4:	080006d1 	.word	0x080006d1
 80005a8:	080006d5 	.word	0x080006d5
 80005ac:	08000771 	.word	0x08000771
 80005b0:	08000771 	.word	0x08000771
 80005b4:	08000771 	.word	0x08000771
 80005b8:	08000771 	.word	0x08000771
 80005bc:	08000771 	.word	0x08000771
 80005c0:	08000771 	.word	0x08000771
 80005c4:	08000771 	.word	0x08000771
 80005c8:	080006ed 	.word	0x080006ed
 80005cc:	080006f5 	.word	0x080006f5
 80005d0:	080006f9 	.word	0x080006f9
 80005d4:	08000701 	.word	0x08000701
 80005d8:	08000705 	.word	0x08000705
 80005dc:	08000709 	.word	0x08000709
 80005e0:	0800070d 	.word	0x0800070d
 80005e4:	08000711 	.word	0x08000711
 80005e8:	08000719 	.word	0x08000719
 80005ec:	08000721 	.word	0x08000721
 80005f0:	08000729 	.word	0x08000729
 80005f4:	0800072d 	.word	0x0800072d
 80005f8:	08000731 	.word	0x08000731
 80005fc:	08000735 	.word	0x08000735
 8000600:	08000739 	.word	0x08000739
 8000604:	0800073d 	.word	0x0800073d
 8000608:	08000741 	.word	0x08000741
 800060c:	08000749 	.word	0x08000749
 8000610:	0800074d 	.word	0x0800074d
 8000614:	08000751 	.word	0x08000751
 8000618:	08000755 	.word	0x08000755
 800061c:	08000759 	.word	0x08000759
 8000620:	0800075d 	.word	0x0800075d
 8000624:	08000765 	.word	0x08000765
 8000628:	08000769 	.word	0x08000769
 800062c:	0800076d 	.word	0x0800076d
 8000630:	08000771 	.word	0x08000771
 8000634:	08000771 	.word	0x08000771
 8000638:	08000771 	.word	0x08000771
 800063c:	080006dd 	.word	0x080006dd
 8000640:	080006d9 	.word	0x080006d9
 8000644:	08000771 	.word	0x08000771
 8000648:	080006f1 	.word	0x080006f1
 800064c:	080006f5 	.word	0x080006f5
 8000650:	080006fd 	.word	0x080006fd
 8000654:	08000701 	.word	0x08000701
 8000658:	08000705 	.word	0x08000705
 800065c:	08000709 	.word	0x08000709
 8000660:	0800070d 	.word	0x0800070d
 8000664:	08000715 	.word	0x08000715
 8000668:	0800071d 	.word	0x0800071d
 800066c:	08000725 	.word	0x08000725
 8000670:	08000729 	.word	0x08000729
 8000674:	0800072d 	.word	0x0800072d
 8000678:	08000731 	.word	0x08000731
 800067c:	08000735 	.word	0x08000735
 8000680:	08000739 	.word	0x08000739
 8000684:	0800073d 	.word	0x0800073d
 8000688:	08000745 	.word	0x08000745
 800068c:	08000749 	.word	0x08000749
 8000690:	0800074d 	.word	0x0800074d
 8000694:	08000751 	.word	0x08000751
 8000698:	08000755 	.word	0x08000755
 800069c:	08000759 	.word	0x08000759
 80006a0:	08000761 	.word	0x08000761
 80006a4:	08000765 	.word	0x08000765
 80006a8:	08000769 	.word	0x08000769
 80006ac:	0800076d 	.word	0x0800076d
			case '0' : return 0x3f;
 80006b0:	233f      	movs	r3, #63	@ 0x3f
 80006b2:	e05e      	b.n	8000772 <char2segments+0x24a>
			case '1' : return 0x06;
 80006b4:	2306      	movs	r3, #6
 80006b6:	e05c      	b.n	8000772 <char2segments+0x24a>
			case '2' : return 0x5b;
 80006b8:	235b      	movs	r3, #91	@ 0x5b
 80006ba:	e05a      	b.n	8000772 <char2segments+0x24a>
			case '3' : return 0x4f;
 80006bc:	234f      	movs	r3, #79	@ 0x4f
 80006be:	e058      	b.n	8000772 <char2segments+0x24a>
			case '4' : return 0x66;
 80006c0:	2366      	movs	r3, #102	@ 0x66
 80006c2:	e056      	b.n	8000772 <char2segments+0x24a>
			case '5' : return 0x6d;
 80006c4:	236d      	movs	r3, #109	@ 0x6d
 80006c6:	e054      	b.n	8000772 <char2segments+0x24a>
			case '6' : return 0x7d;
 80006c8:	237d      	movs	r3, #125	@ 0x7d
 80006ca:	e052      	b.n	8000772 <char2segments+0x24a>
			case '7' : return 0x07;
 80006cc:	2307      	movs	r3, #7
 80006ce:	e050      	b.n	8000772 <char2segments+0x24a>
			case '8' : return 0x7f;
 80006d0:	237f      	movs	r3, #127	@ 0x7f
 80006d2:	e04e      	b.n	8000772 <char2segments+0x24a>
			case '9' : return 0x6f;
 80006d4:	236f      	movs	r3, #111	@ 0x6f
 80006d6:	e04c      	b.n	8000772 <char2segments+0x24a>
            case '_' : return 0x08;
 80006d8:	2308      	movs	r3, #8
 80006da:	e04a      	b.n	8000772 <char2segments+0x24a>
            case '^' : return 0x01; // ¯
 80006dc:	2301      	movs	r3, #1
 80006de:	e048      	b.n	8000772 <char2segments+0x24a>
            case '-' : return 0x40;
 80006e0:	2340      	movs	r3, #64	@ 0x40
 80006e2:	e046      	b.n	8000772 <char2segments+0x24a>
            case '*' : return 0x63; // °
 80006e4:	2363      	movs	r3, #99	@ 0x63
 80006e6:	e044      	b.n	8000772 <char2segments+0x24a>
            case ' ' : return 0x00; // space
 80006e8:	2300      	movs	r3, #0
 80006ea:	e042      	b.n	8000772 <char2segments+0x24a>
            case 'A' : return 0x77; // upper case A
 80006ec:	2377      	movs	r3, #119	@ 0x77
 80006ee:	e040      	b.n	8000772 <char2segments+0x24a>
            case 'a' : return 0x5f; // lower case a
 80006f0:	235f      	movs	r3, #95	@ 0x5f
 80006f2:	e03e      	b.n	8000772 <char2segments+0x24a>
            case 'B' :              // lower case b
            case 'b' : return 0x7c; // lower case b
 80006f4:	237c      	movs	r3, #124	@ 0x7c
 80006f6:	e03c      	b.n	8000772 <char2segments+0x24a>
            case 'C' : return 0x39; // upper case C
 80006f8:	2339      	movs	r3, #57	@ 0x39
 80006fa:	e03a      	b.n	8000772 <char2segments+0x24a>
            case 'c' : return 0x58; // lower case c
 80006fc:	2358      	movs	r3, #88	@ 0x58
 80006fe:	e038      	b.n	8000772 <char2segments+0x24a>
            case 'D' :              // lower case d
            case 'd' : return 0x5e; // lower case d
 8000700:	235e      	movs	r3, #94	@ 0x5e
 8000702:	e036      	b.n	8000772 <char2segments+0x24a>
            case 'E' :              // upper case E
            case 'e' : return 0x79; // upper case E
 8000704:	2379      	movs	r3, #121	@ 0x79
 8000706:	e034      	b.n	8000772 <char2segments+0x24a>
            case 'F' :              // upper case F
            case 'f' : return 0x71; // upper case F
 8000708:	2371      	movs	r3, #113	@ 0x71
 800070a:	e032      	b.n	8000772 <char2segments+0x24a>
            case 'G' :              // upper case G
            case 'g' : return 0x35; // upper case G
 800070c:	2335      	movs	r3, #53	@ 0x35
 800070e:	e030      	b.n	8000772 <char2segments+0x24a>
            case 'H' : return 0x76; // upper case H
 8000710:	2376      	movs	r3, #118	@ 0x76
 8000712:	e02e      	b.n	8000772 <char2segments+0x24a>
            case 'h' : return 0x74; // lower case h
 8000714:	2374      	movs	r3, #116	@ 0x74
 8000716:	e02c      	b.n	8000772 <char2segments+0x24a>
            case 'I' : return 0x06; // 1
 8000718:	2306      	movs	r3, #6
 800071a:	e02a      	b.n	8000772 <char2segments+0x24a>
            case 'i' : return 0x04; // lower case i
 800071c:	2304      	movs	r3, #4
 800071e:	e028      	b.n	8000772 <char2segments+0x24a>
            case 'J' : return 0x1e; // upper case J
 8000720:	231e      	movs	r3, #30
 8000722:	e026      	b.n	8000772 <char2segments+0x24a>
            case 'j' : return 0x16; // lower case j
 8000724:	2316      	movs	r3, #22
 8000726:	e024      	b.n	8000772 <char2segments+0x24a>
            case 'K' :              // upper case K
            case 'k' : return 0x75; // upper case K
 8000728:	2375      	movs	r3, #117	@ 0x75
 800072a:	e022      	b.n	8000772 <char2segments+0x24a>
            case 'L' :              // upper case L
            case 'l' : return 0x38; // upper case L
 800072c:	2338      	movs	r3, #56	@ 0x38
 800072e:	e020      	b.n	8000772 <char2segments+0x24a>
            case 'M' :              // twice tall n
            case 'm' : return 0x37; // twice tall ∩
 8000730:	2337      	movs	r3, #55	@ 0x37
 8000732:	e01e      	b.n	8000772 <char2segments+0x24a>
            case 'N' :              // lower case n
            case 'n' : return 0x54; // lower case n
 8000734:	2354      	movs	r3, #84	@ 0x54
 8000736:	e01c      	b.n	8000772 <char2segments+0x24a>
            case 'O' :              // lower case o
            case 'o' : return 0x5c; // lower case o
 8000738:	235c      	movs	r3, #92	@ 0x5c
 800073a:	e01a      	b.n	8000772 <char2segments+0x24a>
            case 'P' :              // upper case P
            case 'p' : return 0x73; // upper case P
 800073c:	2373      	movs	r3, #115	@ 0x73
 800073e:	e018      	b.n	8000772 <char2segments+0x24a>
            case 'Q' : return 0x7b; // upper case Q
 8000740:	237b      	movs	r3, #123	@ 0x7b
 8000742:	e016      	b.n	8000772 <char2segments+0x24a>
            case 'q' : return 0x67; // lower case q
 8000744:	2367      	movs	r3, #103	@ 0x67
 8000746:	e014      	b.n	8000772 <char2segments+0x24a>
            case 'R' :              // lower case r
            case 'r' : return 0x50; // lower case r
 8000748:	2350      	movs	r3, #80	@ 0x50
 800074a:	e012      	b.n	8000772 <char2segments+0x24a>
            case 'S' :              // 5
            case 's' : return 0x6d; // 5
 800074c:	236d      	movs	r3, #109	@ 0x6d
 800074e:	e010      	b.n	8000772 <char2segments+0x24a>
            case 'T' :              // lower case t
            case 't' : return 0x78; // lower case t
 8000750:	2378      	movs	r3, #120	@ 0x78
 8000752:	e00e      	b.n	8000772 <char2segments+0x24a>
            case 'U' :              // lower case u
            case 'u' : return 0x3e; // lower case u
 8000754:	233e      	movs	r3, #62	@ 0x3e
 8000756:	e00c      	b.n	8000772 <char2segments+0x24a>
            case 'V' :              // twice tall u
            case 'v' : return 0x3e; // twice tall u
 8000758:	233e      	movs	r3, #62	@ 0x3e
 800075a:	e00a      	b.n	8000772 <char2segments+0x24a>
            case 'W' : return 0x7e; // upside down A
 800075c:	237e      	movs	r3, #126	@ 0x7e
 800075e:	e008      	b.n	8000772 <char2segments+0x24a>
            case 'w' : return 0x2a; // separated w
 8000760:	232a      	movs	r3, #42	@ 0x2a
 8000762:	e006      	b.n	8000772 <char2segments+0x24a>
            case 'X' :              // upper case H
            case 'x' : return 0x76; // upper case H
 8000764:	2376      	movs	r3, #118	@ 0x76
 8000766:	e004      	b.n	8000772 <char2segments+0x24a>
            case 'Y' :              // lower case y
            case 'y' : return 0x6e; // lower case y
 8000768:	236e      	movs	r3, #110	@ 0x6e
 800076a:	e002      	b.n	8000772 <char2segments+0x24a>
            case 'Z' :              // separated Z
            case 'z' : return 0x1b; // separated Z
 800076c:	231b      	movs	r3, #27
 800076e:	e000      	b.n	8000772 <char2segments+0x24a>
        }
        return 0;
 8000770:	2300      	movs	r3, #0
    }
 8000772:	4618      	mov	r0, r3
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <tm1637_THEDisplayer>:
void tm1637_THEDisplayer(const char *words, uint8_t brightness) {
 800077c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000780:	b087      	sub	sp, #28
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
 8000786:	460b      	mov	r3, r1
 8000788:	70fb      	strb	r3, [r7, #3]
 800078a:	466b      	mov	r3, sp
 800078c:	461e      	mov	r6, r3
    size_t length = strlen(words); // Get the string length
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff fcdc 	bl	800014c <strlen>
 8000794:	6138      	str	r0, [r7, #16]
    uint8_t segmentValues[length]; // Create array based on actual length
 8000796:	6939      	ldr	r1, [r7, #16]
 8000798:	460b      	mov	r3, r1
 800079a:	3b01      	subs	r3, #1
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	2300      	movs	r3, #0
 80007a0:	4688      	mov	r8, r1
 80007a2:	4699      	mov	r9, r3
 80007a4:	f04f 0200 	mov.w	r2, #0
 80007a8:	f04f 0300 	mov.w	r3, #0
 80007ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80007b8:	2300      	movs	r3, #0
 80007ba:	460c      	mov	r4, r1
 80007bc:	461d      	mov	r5, r3
 80007be:	f04f 0200 	mov.w	r2, #0
 80007c2:	f04f 0300 	mov.w	r3, #0
 80007c6:	00eb      	lsls	r3, r5, #3
 80007c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80007cc:	00e2      	lsls	r2, r4, #3
 80007ce:	1dcb      	adds	r3, r1, #7
 80007d0:	08db      	lsrs	r3, r3, #3
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	ebad 0d03 	sub.w	sp, sp, r3
 80007d8:	466b      	mov	r3, sp
 80007da:	3300      	adds	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]

    // Convert each character to a 7-segment display value
    for (size_t i = 0; i < length; i++) {
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	e010      	b.n	8000806 <tm1637_THEDisplayer+0x8a>
        segmentValues[i] = char2segments(words[i]);
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	4413      	add	r3, r2
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fe9b 	bl	8000528 <char2segments>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4619      	mov	r1, r3
 80007f6:	68ba      	ldr	r2, [r7, #8]
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	4413      	add	r3, r2
 80007fc:	460a      	mov	r2, r1
 80007fe:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < length; i++) {
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	3301      	adds	r3, #1
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	697a      	ldr	r2, [r7, #20]
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	429a      	cmp	r2, r3
 800080c:	d3ea      	bcc.n	80007e4 <tm1637_THEDisplayer+0x68>
    }

    // Call the display function
    tm1637_DisplayHandle(brightness, segmentValues);
 800080e:	78fb      	ldrb	r3, [r7, #3]
 8000810:	68b9      	ldr	r1, [r7, #8]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fe18 	bl	8000448 <tm1637_DisplayHandle>
 8000818:	46b5      	mov	sp, r6
}
 800081a:	bf00      	nop
 800081c:	371c      	adds	r7, #28
 800081e:	46bd      	mov	sp, r7
 8000820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000828:	f000 f95e 	bl	8000ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082c:	f000 f80c 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000830:	f000 f850 	bl	80008d4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Display_Startup(brightness);
 8000834:	4b03      	ldr	r3, [pc, #12]	@ (8000844 <main+0x20>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fc8f 	bl	800015c <Display_Startup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800083e:	bf00      	nop
 8000840:	e7fd      	b.n	800083e <main+0x1a>
 8000842:	bf00      	nop
 8000844:	20000000 	.word	0x20000000

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b090      	sub	sp, #64	@ 0x40
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0318 	add.w	r3, r7, #24
 8000852:	2228      	movs	r2, #40	@ 0x28
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f001 f842 	bl	80018e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800086a:	2301      	movs	r3, #1
 800086c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800086e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000872:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000878:	2301      	movs	r3, #1
 800087a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087c:	2302      	movs	r3, #2
 800087e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000880:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000884:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000886:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800088a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088c:	f107 0318 	add.w	r3, r7, #24
 8000890:	4618      	mov	r0, r3
 8000892:	f000 fc47 	bl	8001124 <HAL_RCC_OscConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800089c:	f000 f894 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a0:	230f      	movs	r3, #15
 80008a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a4:	2302      	movs	r3, #2
 80008a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2102      	movs	r1, #2
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 feb4 	bl	8001628 <HAL_RCC_ClockConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80008c6:	f000 f87f 	bl	80009c8 <Error_Handler>
  }
}
 80008ca:	bf00      	nop
 80008cc:	3740      	adds	r7, #64	@ 0x40
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 0310 	add.w	r3, r7, #16
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e8:	4b34      	ldr	r3, [pc, #208]	@ (80009bc <MX_GPIO_Init+0xe8>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a33      	ldr	r2, [pc, #204]	@ (80009bc <MX_GPIO_Init+0xe8>)
 80008ee:	f043 0310 	orr.w	r3, r3, #16
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b31      	ldr	r3, [pc, #196]	@ (80009bc <MX_GPIO_Init+0xe8>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0310 	and.w	r3, r3, #16
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000900:	4b2e      	ldr	r3, [pc, #184]	@ (80009bc <MX_GPIO_Init+0xe8>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a2d      	ldr	r2, [pc, #180]	@ (80009bc <MX_GPIO_Init+0xe8>)
 8000906:	f043 0320 	orr.w	r3, r3, #32
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b2b      	ldr	r3, [pc, #172]	@ (80009bc <MX_GPIO_Init+0xe8>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0320 	and.w	r3, r3, #32
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000918:	4b28      	ldr	r3, [pc, #160]	@ (80009bc <MX_GPIO_Init+0xe8>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a27      	ldr	r2, [pc, #156]	@ (80009bc <MX_GPIO_Init+0xe8>)
 800091e:	f043 0304 	orr.w	r3, r3, #4
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b25      	ldr	r3, [pc, #148]	@ (80009bc <MX_GPIO_Init+0xe8>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0304 	and.w	r3, r3, #4
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000930:	4b22      	ldr	r3, [pc, #136]	@ (80009bc <MX_GPIO_Init+0xe8>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a21      	ldr	r2, [pc, #132]	@ (80009bc <MX_GPIO_Init+0xe8>)
 8000936:	f043 0308 	orr.w	r3, r3, #8
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b1f      	ldr	r3, [pc, #124]	@ (80009bc <MX_GPIO_Init+0xe8>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f003 0308 	and.w	r3, r3, #8
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	210c      	movs	r1, #12
 800094c:	481c      	ldr	r0, [pc, #112]	@ (80009c0 <MX_GPIO_Init+0xec>)
 800094e:	f000 fbd0 	bl	80010f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCLK_Pin|SDO_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000958:	481a      	ldr	r0, [pc, #104]	@ (80009c4 <MX_GPIO_Init+0xf0>)
 800095a:	f000 fbca 	bl	80010f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 800095e:	f641 0303 	movw	r3, #6147	@ 0x1803
 8000962:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	4619      	mov	r1, r3
 8000972:	4813      	ldr	r0, [pc, #76]	@ (80009c0 <MX_GPIO_Init+0xec>)
 8000974:	f000 fa22 	bl	8000dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000978:	230c      	movs	r3, #12
 800097a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2302      	movs	r3, #2
 8000986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	4619      	mov	r1, r3
 800098e:	480c      	ldr	r0, [pc, #48]	@ (80009c0 <MX_GPIO_Init+0xec>)
 8000990:	f000 fa14 	bl	8000dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin SDO_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|SDO_Pin;
 8000994:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000998:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2302      	movs	r3, #2
 80009a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <MX_GPIO_Init+0xf0>)
 80009ae:	f000 fa05 	bl	8000dbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b2:	bf00      	nop
 80009b4:	3720      	adds	r7, #32
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40010800 	.word	0x40010800
 80009c4:	40010c00 	.word	0x40010c00

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <Error_Handler+0x8>

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009da:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <HAL_MspInit+0x5c>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	4a14      	ldr	r2, [pc, #80]	@ (8000a30 <HAL_MspInit+0x5c>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6193      	str	r3, [r2, #24]
 80009e6:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <HAL_MspInit+0x5c>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <HAL_MspInit+0x5c>)
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000a30 <HAL_MspInit+0x5c>)
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009fc:	61d3      	str	r3, [r2, #28]
 80009fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <HAL_MspInit+0x5c>)
 8000a00:	69db      	ldr	r3, [r3, #28]
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a34 <HAL_MspInit+0x60>)
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	4a04      	ldr	r2, [pc, #16]	@ (8000a34 <HAL_MspInit+0x60>)
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a26:	bf00      	nop
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40010000 	.word	0x40010000

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <NMI_Handler+0x4>

08000a40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <MemManage_Handler+0x4>

08000a50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr

08000a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr

08000a78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a88:	f000 f874 	bl	8000b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a9c:	f7ff fff8 	bl	8000a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa0:	480b      	ldr	r0, [pc, #44]	@ (8000ad0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000aa2:	490c      	ldr	r1, [pc, #48]	@ (8000ad4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ad8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab6:	4a09      	ldr	r2, [pc, #36]	@ (8000adc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ab8:	4c09      	ldr	r4, [pc, #36]	@ (8000ae0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ac6:	f000 ff13 	bl	80018f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aca:	f7ff feab 	bl	8000824 <main>
  bx lr
 8000ace:	4770      	bx	lr
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ad8:	080019b8 	.word	0x080019b8
  ldr r2, =_sbss
 8000adc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ae0:	20000030 	.word	0x20000030

08000ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC1_2_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aec:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <HAL_Init+0x28>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a07      	ldr	r2, [pc, #28]	@ (8000b10 <HAL_Init+0x28>)
 8000af2:	f043 0310 	orr.w	r3, r3, #16
 8000af6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 f92b 	bl	8000d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afe:	200f      	movs	r0, #15
 8000b00:	f000 f808 	bl	8000b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b04:	f7ff ff66 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40022000 	.word	0x40022000

08000b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b1c:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <HAL_InitTick+0x54>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <HAL_InitTick+0x58>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f935 	bl	8000da2 <HAL_SYSTICK_Config>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00e      	b.n	8000b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b0f      	cmp	r3, #15
 8000b46:	d80a      	bhi.n	8000b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f000 f90b 	bl	8000d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b54:	4a06      	ldr	r2, [pc, #24]	@ (8000b70 <HAL_InitTick+0x5c>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e000      	b.n	8000b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000004 	.word	0x20000004
 8000b6c:	2000000c 	.word	0x2000000c
 8000b70:	20000008 	.word	0x20000008

08000b74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b78:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <HAL_IncTick+0x1c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b05      	ldr	r3, [pc, #20]	@ (8000b94 <HAL_IncTick+0x20>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	4a03      	ldr	r2, [pc, #12]	@ (8000b94 <HAL_IncTick+0x20>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	2000000c 	.word	0x2000000c
 8000b94:	2000002c 	.word	0x2000002c

08000b98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b02      	ldr	r3, [pc, #8]	@ (8000ba8 <HAL_GetTick+0x10>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	2000002c 	.word	0x2000002c

08000bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb4:	f7ff fff0 	bl	8000b98 <HAL_GetTick>
 8000bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc4:	d005      	beq.n	8000bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <HAL_Delay+0x44>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4413      	add	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bd2:	bf00      	nop
 8000bd4:	f7ff ffe0 	bl	8000b98 <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d8f7      	bhi.n	8000bd4 <HAL_Delay+0x28>
  {
  }
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	2000000c 	.word	0x2000000c

08000bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c26:	4a04      	ldr	r2, [pc, #16]	@ (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	60d3      	str	r3, [r2, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	@ (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	@ (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	@ 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	@ 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d20:	d301      	bcc.n	8000d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00f      	b.n	8000d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d26:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <SysTick_Config+0x40>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2e:	210f      	movs	r1, #15
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f7ff ff90 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d38:	4b05      	ldr	r3, [pc, #20]	@ (8000d50 <SysTick_Config+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3e:	4b04      	ldr	r3, [pc, #16]	@ (8000d50 <SysTick_Config+0x40>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	e000e010 	.word	0xe000e010

08000d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff49 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7c:	f7ff ff5e 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	68b9      	ldr	r1, [r7, #8]
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f7ff ff90 	bl	8000cac <NVIC_EncodePriority>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff5f 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ffb0 	bl	8000d10 <SysTick_Config>
 8000db0:	4603      	mov	r3, r0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b08b      	sub	sp, #44	@ 0x2c
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dce:	e169      	b.n	80010a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	69fa      	ldr	r2, [r7, #28]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	f040 8158 	bne.w	800109e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	4a9a      	ldr	r2, [pc, #616]	@ (800105c <HAL_GPIO_Init+0x2a0>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d05e      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
 8000df8:	4a98      	ldr	r2, [pc, #608]	@ (800105c <HAL_GPIO_Init+0x2a0>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d875      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000dfe:	4a98      	ldr	r2, [pc, #608]	@ (8001060 <HAL_GPIO_Init+0x2a4>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d058      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
 8000e04:	4a96      	ldr	r2, [pc, #600]	@ (8001060 <HAL_GPIO_Init+0x2a4>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d86f      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000e0a:	4a96      	ldr	r2, [pc, #600]	@ (8001064 <HAL_GPIO_Init+0x2a8>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d052      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
 8000e10:	4a94      	ldr	r2, [pc, #592]	@ (8001064 <HAL_GPIO_Init+0x2a8>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d869      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000e16:	4a94      	ldr	r2, [pc, #592]	@ (8001068 <HAL_GPIO_Init+0x2ac>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d04c      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
 8000e1c:	4a92      	ldr	r2, [pc, #584]	@ (8001068 <HAL_GPIO_Init+0x2ac>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d863      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000e22:	4a92      	ldr	r2, [pc, #584]	@ (800106c <HAL_GPIO_Init+0x2b0>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d046      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
 8000e28:	4a90      	ldr	r2, [pc, #576]	@ (800106c <HAL_GPIO_Init+0x2b0>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d85d      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000e2e:	2b12      	cmp	r3, #18
 8000e30:	d82a      	bhi.n	8000e88 <HAL_GPIO_Init+0xcc>
 8000e32:	2b12      	cmp	r3, #18
 8000e34:	d859      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000e36:	a201      	add	r2, pc, #4	@ (adr r2, 8000e3c <HAL_GPIO_Init+0x80>)
 8000e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3c:	08000eb7 	.word	0x08000eb7
 8000e40:	08000e91 	.word	0x08000e91
 8000e44:	08000ea3 	.word	0x08000ea3
 8000e48:	08000ee5 	.word	0x08000ee5
 8000e4c:	08000eeb 	.word	0x08000eeb
 8000e50:	08000eeb 	.word	0x08000eeb
 8000e54:	08000eeb 	.word	0x08000eeb
 8000e58:	08000eeb 	.word	0x08000eeb
 8000e5c:	08000eeb 	.word	0x08000eeb
 8000e60:	08000eeb 	.word	0x08000eeb
 8000e64:	08000eeb 	.word	0x08000eeb
 8000e68:	08000eeb 	.word	0x08000eeb
 8000e6c:	08000eeb 	.word	0x08000eeb
 8000e70:	08000eeb 	.word	0x08000eeb
 8000e74:	08000eeb 	.word	0x08000eeb
 8000e78:	08000eeb 	.word	0x08000eeb
 8000e7c:	08000eeb 	.word	0x08000eeb
 8000e80:	08000e99 	.word	0x08000e99
 8000e84:	08000ead 	.word	0x08000ead
 8000e88:	4a79      	ldr	r2, [pc, #484]	@ (8001070 <HAL_GPIO_Init+0x2b4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d013      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e8e:	e02c      	b.n	8000eea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	623b      	str	r3, [r7, #32]
          break;
 8000e96:	e029      	b.n	8000eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	623b      	str	r3, [r7, #32]
          break;
 8000ea0:	e024      	b.n	8000eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	3308      	adds	r3, #8
 8000ea8:	623b      	str	r3, [r7, #32]
          break;
 8000eaa:	e01f      	b.n	8000eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	330c      	adds	r3, #12
 8000eb2:	623b      	str	r3, [r7, #32]
          break;
 8000eb4:	e01a      	b.n	8000eec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d102      	bne.n	8000ec4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	623b      	str	r3, [r7, #32]
          break;
 8000ec2:	e013      	b.n	8000eec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d105      	bne.n	8000ed8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ecc:	2308      	movs	r3, #8
 8000ece:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	69fa      	ldr	r2, [r7, #28]
 8000ed4:	611a      	str	r2, [r3, #16]
          break;
 8000ed6:	e009      	b.n	8000eec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ed8:	2308      	movs	r3, #8
 8000eda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69fa      	ldr	r2, [r7, #28]
 8000ee0:	615a      	str	r2, [r3, #20]
          break;
 8000ee2:	e003      	b.n	8000eec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
          break;
 8000ee8:	e000      	b.n	8000eec <HAL_GPIO_Init+0x130>
          break;
 8000eea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	2bff      	cmp	r3, #255	@ 0xff
 8000ef0:	d801      	bhi.n	8000ef6 <HAL_GPIO_Init+0x13a>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	e001      	b.n	8000efa <HAL_GPIO_Init+0x13e>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	2bff      	cmp	r3, #255	@ 0xff
 8000f00:	d802      	bhi.n	8000f08 <HAL_GPIO_Init+0x14c>
 8000f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	e002      	b.n	8000f0e <HAL_GPIO_Init+0x152>
 8000f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0a:	3b08      	subs	r3, #8
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	210f      	movs	r1, #15
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	401a      	ands	r2, r3
 8000f20:	6a39      	ldr	r1, [r7, #32]
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	fa01 f303 	lsl.w	r3, r1, r3
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 80b1 	beq.w	800109e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f3c:	4b4d      	ldr	r3, [pc, #308]	@ (8001074 <HAL_GPIO_Init+0x2b8>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a4c      	ldr	r2, [pc, #304]	@ (8001074 <HAL_GPIO_Init+0x2b8>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b4a      	ldr	r3, [pc, #296]	@ (8001074 <HAL_GPIO_Init+0x2b8>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f54:	4a48      	ldr	r2, [pc, #288]	@ (8001078 <HAL_GPIO_Init+0x2bc>)
 8000f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f58:	089b      	lsrs	r3, r3, #2
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	4013      	ands	r3, r2
 8000f76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a40      	ldr	r2, [pc, #256]	@ (800107c <HAL_GPIO_Init+0x2c0>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d013      	beq.n	8000fa8 <HAL_GPIO_Init+0x1ec>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a3f      	ldr	r2, [pc, #252]	@ (8001080 <HAL_GPIO_Init+0x2c4>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d00d      	beq.n	8000fa4 <HAL_GPIO_Init+0x1e8>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a3e      	ldr	r2, [pc, #248]	@ (8001084 <HAL_GPIO_Init+0x2c8>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d007      	beq.n	8000fa0 <HAL_GPIO_Init+0x1e4>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a3d      	ldr	r2, [pc, #244]	@ (8001088 <HAL_GPIO_Init+0x2cc>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d101      	bne.n	8000f9c <HAL_GPIO_Init+0x1e0>
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e006      	b.n	8000faa <HAL_GPIO_Init+0x1ee>
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	e004      	b.n	8000faa <HAL_GPIO_Init+0x1ee>
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	e002      	b.n	8000faa <HAL_GPIO_Init+0x1ee>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e000      	b.n	8000faa <HAL_GPIO_Init+0x1ee>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fac:	f002 0203 	and.w	r2, r2, #3
 8000fb0:	0092      	lsls	r2, r2, #2
 8000fb2:	4093      	lsls	r3, r2
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fba:	492f      	ldr	r1, [pc, #188]	@ (8001078 <HAL_GPIO_Init+0x2bc>)
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d006      	beq.n	8000fe2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fd4:	4b2d      	ldr	r3, [pc, #180]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	492c      	ldr	r1, [pc, #176]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	608b      	str	r3, [r1, #8]
 8000fe0:	e006      	b.n	8000ff0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	4928      	ldr	r1, [pc, #160]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 8000fec:	4013      	ands	r3, r2
 8000fee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d006      	beq.n	800100a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ffc:	4b23      	ldr	r3, [pc, #140]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 8000ffe:	68da      	ldr	r2, [r3, #12]
 8001000:	4922      	ldr	r1, [pc, #136]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	60cb      	str	r3, [r1, #12]
 8001008:	e006      	b.n	8001018 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800100a:	4b20      	ldr	r3, [pc, #128]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 800100c:	68da      	ldr	r2, [r3, #12]
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	43db      	mvns	r3, r3
 8001012:	491e      	ldr	r1, [pc, #120]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 8001014:	4013      	ands	r3, r2
 8001016:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d006      	beq.n	8001032 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001024:	4b19      	ldr	r3, [pc, #100]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	4918      	ldr	r1, [pc, #96]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	604b      	str	r3, [r1, #4]
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001032:	4b16      	ldr	r3, [pc, #88]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	43db      	mvns	r3, r3
 800103a:	4914      	ldr	r1, [pc, #80]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 800103c:	4013      	ands	r3, r2
 800103e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d021      	beq.n	8001090 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800104c:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	490e      	ldr	r1, [pc, #56]	@ (800108c <HAL_GPIO_Init+0x2d0>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	600b      	str	r3, [r1, #0]
 8001058:	e021      	b.n	800109e <HAL_GPIO_Init+0x2e2>
 800105a:	bf00      	nop
 800105c:	10320000 	.word	0x10320000
 8001060:	10310000 	.word	0x10310000
 8001064:	10220000 	.word	0x10220000
 8001068:	10210000 	.word	0x10210000
 800106c:	10120000 	.word	0x10120000
 8001070:	10110000 	.word	0x10110000
 8001074:	40021000 	.word	0x40021000
 8001078:	40010000 	.word	0x40010000
 800107c:	40010800 	.word	0x40010800
 8001080:	40010c00 	.word	0x40010c00
 8001084:	40011000 	.word	0x40011000
 8001088:	40011400 	.word	0x40011400
 800108c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001090:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <HAL_GPIO_Init+0x304>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	43db      	mvns	r3, r3
 8001098:	4909      	ldr	r1, [pc, #36]	@ (80010c0 <HAL_GPIO_Init+0x304>)
 800109a:	4013      	ands	r3, r2
 800109c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800109e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a0:	3301      	adds	r3, #1
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010aa:	fa22 f303 	lsr.w	r3, r2, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f47f ae8e 	bne.w	8000dd0 <HAL_GPIO_Init+0x14>
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	372c      	adds	r7, #44	@ 0x2c
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	40010400 	.word	0x40010400

080010c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	887b      	ldrh	r3, [r7, #2]
 80010d6:	4013      	ands	r3, r2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d002      	beq.n	80010e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010dc:	2301      	movs	r3, #1
 80010de:	73fb      	strb	r3, [r7, #15]
 80010e0:	e001      	b.n	80010e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010e2:	2300      	movs	r3, #0
 80010e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr

080010f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	460b      	mov	r3, r1
 80010fc:	807b      	strh	r3, [r7, #2]
 80010fe:	4613      	mov	r3, r2
 8001100:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001102:	787b      	ldrb	r3, [r7, #1]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001108:	887a      	ldrh	r2, [r7, #2]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800110e:	e003      	b.n	8001118 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	041a      	lsls	r2, r3, #16
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	611a      	str	r2, [r3, #16]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
	...

08001124 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e272      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b00      	cmp	r3, #0
 8001140:	f000 8087 	beq.w	8001252 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001144:	4b92      	ldr	r3, [pc, #584]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 030c 	and.w	r3, r3, #12
 800114c:	2b04      	cmp	r3, #4
 800114e:	d00c      	beq.n	800116a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001150:	4b8f      	ldr	r3, [pc, #572]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 030c 	and.w	r3, r3, #12
 8001158:	2b08      	cmp	r3, #8
 800115a:	d112      	bne.n	8001182 <HAL_RCC_OscConfig+0x5e>
 800115c:	4b8c      	ldr	r3, [pc, #560]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001168:	d10b      	bne.n	8001182 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116a:	4b89      	ldr	r3, [pc, #548]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d06c      	beq.n	8001250 <HAL_RCC_OscConfig+0x12c>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d168      	bne.n	8001250 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e24c      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800118a:	d106      	bne.n	800119a <HAL_RCC_OscConfig+0x76>
 800118c:	4b80      	ldr	r3, [pc, #512]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a7f      	ldr	r2, [pc, #508]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 8001192:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	e02e      	b.n	80011f8 <HAL_RCC_OscConfig+0xd4>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10c      	bne.n	80011bc <HAL_RCC_OscConfig+0x98>
 80011a2:	4b7b      	ldr	r3, [pc, #492]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a7a      	ldr	r2, [pc, #488]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	4b78      	ldr	r3, [pc, #480]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a77      	ldr	r2, [pc, #476]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	e01d      	b.n	80011f8 <HAL_RCC_OscConfig+0xd4>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011c4:	d10c      	bne.n	80011e0 <HAL_RCC_OscConfig+0xbc>
 80011c6:	4b72      	ldr	r3, [pc, #456]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a71      	ldr	r2, [pc, #452]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	4b6f      	ldr	r3, [pc, #444]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a6e      	ldr	r2, [pc, #440]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	e00b      	b.n	80011f8 <HAL_RCC_OscConfig+0xd4>
 80011e0:	4b6b      	ldr	r3, [pc, #428]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a6a      	ldr	r2, [pc, #424]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	4b68      	ldr	r3, [pc, #416]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a67      	ldr	r2, [pc, #412]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 80011f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d013      	beq.n	8001228 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001200:	f7ff fcca 	bl	8000b98 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001208:	f7ff fcc6 	bl	8000b98 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b64      	cmp	r3, #100	@ 0x64
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e200      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121a:	4b5d      	ldr	r3, [pc, #372]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f0      	beq.n	8001208 <HAL_RCC_OscConfig+0xe4>
 8001226:	e014      	b.n	8001252 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fcb6 	bl	8000b98 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001230:	f7ff fcb2 	bl	8000b98 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	@ 0x64
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e1ec      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001242:	4b53      	ldr	r3, [pc, #332]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f0      	bne.n	8001230 <HAL_RCC_OscConfig+0x10c>
 800124e:	e000      	b.n	8001252 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d063      	beq.n	8001326 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800125e:	4b4c      	ldr	r3, [pc, #304]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 030c 	and.w	r3, r3, #12
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00b      	beq.n	8001282 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800126a:	4b49      	ldr	r3, [pc, #292]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 030c 	and.w	r3, r3, #12
 8001272:	2b08      	cmp	r3, #8
 8001274:	d11c      	bne.n	80012b0 <HAL_RCC_OscConfig+0x18c>
 8001276:	4b46      	ldr	r3, [pc, #280]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d116      	bne.n	80012b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001282:	4b43      	ldr	r3, [pc, #268]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d005      	beq.n	800129a <HAL_RCC_OscConfig+0x176>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d001      	beq.n	800129a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e1c0      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129a:	4b3d      	ldr	r3, [pc, #244]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	4939      	ldr	r1, [pc, #228]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ae:	e03a      	b.n	8001326 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d020      	beq.n	80012fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012b8:	4b36      	ldr	r3, [pc, #216]	@ (8001394 <HAL_RCC_OscConfig+0x270>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012be:	f7ff fc6b 	bl	8000b98 <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c6:	f7ff fc67 	bl	8000b98 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e1a1      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f0      	beq.n	80012c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	4927      	ldr	r1, [pc, #156]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	600b      	str	r3, [r1, #0]
 80012f8:	e015      	b.n	8001326 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012fa:	4b26      	ldr	r3, [pc, #152]	@ (8001394 <HAL_RCC_OscConfig+0x270>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fc4a 	bl	8000b98 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001308:	f7ff fc46 	bl	8000b98 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e180      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131a:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	d03a      	beq.n	80013a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d019      	beq.n	800136e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800133a:	4b17      	ldr	r3, [pc, #92]	@ (8001398 <HAL_RCC_OscConfig+0x274>)
 800133c:	2201      	movs	r2, #1
 800133e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001340:	f7ff fc2a 	bl	8000b98 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001348:	f7ff fc26 	bl	8000b98 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e160      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135a:	4b0d      	ldr	r3, [pc, #52]	@ (8001390 <HAL_RCC_OscConfig+0x26c>)
 800135c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001366:	2001      	movs	r0, #1
 8001368:	f000 fa9c 	bl	80018a4 <RCC_Delay>
 800136c:	e01c      	b.n	80013a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800136e:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <HAL_RCC_OscConfig+0x274>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001374:	f7ff fc10 	bl	8000b98 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800137a:	e00f      	b.n	800139c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800137c:	f7ff fc0c 	bl	8000b98 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d908      	bls.n	800139c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e146      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000
 8001394:	42420000 	.word	0x42420000
 8001398:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800139c:	4b92      	ldr	r3, [pc, #584]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 800139e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1e9      	bne.n	800137c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80a6 	beq.w	8001502 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ba:	4b8b      	ldr	r3, [pc, #556]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10d      	bne.n	80013e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	4b88      	ldr	r3, [pc, #544]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	4a87      	ldr	r2, [pc, #540]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d0:	61d3      	str	r3, [r2, #28]
 80013d2:	4b85      	ldr	r3, [pc, #532]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013de:	2301      	movs	r3, #1
 80013e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e2:	4b82      	ldr	r3, [pc, #520]	@ (80015ec <HAL_RCC_OscConfig+0x4c8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d118      	bne.n	8001420 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ee:	4b7f      	ldr	r3, [pc, #508]	@ (80015ec <HAL_RCC_OscConfig+0x4c8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a7e      	ldr	r2, [pc, #504]	@ (80015ec <HAL_RCC_OscConfig+0x4c8>)
 80013f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013fa:	f7ff fbcd 	bl	8000b98 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001402:	f7ff fbc9 	bl	8000b98 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b64      	cmp	r3, #100	@ 0x64
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e103      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001414:	4b75      	ldr	r3, [pc, #468]	@ (80015ec <HAL_RCC_OscConfig+0x4c8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d106      	bne.n	8001436 <HAL_RCC_OscConfig+0x312>
 8001428:	4b6f      	ldr	r3, [pc, #444]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	4a6e      	ldr	r2, [pc, #440]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6213      	str	r3, [r2, #32]
 8001434:	e02d      	b.n	8001492 <HAL_RCC_OscConfig+0x36e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10c      	bne.n	8001458 <HAL_RCC_OscConfig+0x334>
 800143e:	4b6a      	ldr	r3, [pc, #424]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	4a69      	ldr	r2, [pc, #420]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 8001444:	f023 0301 	bic.w	r3, r3, #1
 8001448:	6213      	str	r3, [r2, #32]
 800144a:	4b67      	ldr	r3, [pc, #412]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	4a66      	ldr	r2, [pc, #408]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 8001450:	f023 0304 	bic.w	r3, r3, #4
 8001454:	6213      	str	r3, [r2, #32]
 8001456:	e01c      	b.n	8001492 <HAL_RCC_OscConfig+0x36e>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	2b05      	cmp	r3, #5
 800145e:	d10c      	bne.n	800147a <HAL_RCC_OscConfig+0x356>
 8001460:	4b61      	ldr	r3, [pc, #388]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	4a60      	ldr	r2, [pc, #384]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 8001466:	f043 0304 	orr.w	r3, r3, #4
 800146a:	6213      	str	r3, [r2, #32]
 800146c:	4b5e      	ldr	r3, [pc, #376]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	4a5d      	ldr	r2, [pc, #372]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6213      	str	r3, [r2, #32]
 8001478:	e00b      	b.n	8001492 <HAL_RCC_OscConfig+0x36e>
 800147a:	4b5b      	ldr	r3, [pc, #364]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	4a5a      	ldr	r2, [pc, #360]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	6213      	str	r3, [r2, #32]
 8001486:	4b58      	ldr	r3, [pc, #352]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	4a57      	ldr	r2, [pc, #348]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 800148c:	f023 0304 	bic.w	r3, r3, #4
 8001490:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d015      	beq.n	80014c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149a:	f7ff fb7d 	bl	8000b98 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a0:	e00a      	b.n	80014b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a2:	f7ff fb79 	bl	8000b98 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e0b1      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b8:	4b4b      	ldr	r3, [pc, #300]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0ee      	beq.n	80014a2 <HAL_RCC_OscConfig+0x37e>
 80014c4:	e014      	b.n	80014f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c6:	f7ff fb67 	bl	8000b98 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014cc:	e00a      	b.n	80014e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ce:	f7ff fb63 	bl	8000b98 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014dc:	4293      	cmp	r3, r2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e09b      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e4:	4b40      	ldr	r3, [pc, #256]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1ee      	bne.n	80014ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014f0:	7dfb      	ldrb	r3, [r7, #23]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d105      	bne.n	8001502 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f6:	4b3c      	ldr	r3, [pc, #240]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	4a3b      	ldr	r2, [pc, #236]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 80014fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001500:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 8087 	beq.w	800161a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800150c:	4b36      	ldr	r3, [pc, #216]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 030c 	and.w	r3, r3, #12
 8001514:	2b08      	cmp	r3, #8
 8001516:	d061      	beq.n	80015dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d146      	bne.n	80015ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001520:	4b33      	ldr	r3, [pc, #204]	@ (80015f0 <HAL_RCC_OscConfig+0x4cc>)
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001526:	f7ff fb37 	bl	8000b98 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800152e:	f7ff fb33 	bl	8000b98 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e06d      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001540:	4b29      	ldr	r3, [pc, #164]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1f0      	bne.n	800152e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001554:	d108      	bne.n	8001568 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001556:	4b24      	ldr	r3, [pc, #144]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	4921      	ldr	r1, [pc, #132]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 8001564:	4313      	orrs	r3, r2
 8001566:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001568:	4b1f      	ldr	r3, [pc, #124]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a19      	ldr	r1, [r3, #32]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001578:	430b      	orrs	r3, r1
 800157a:	491b      	ldr	r1, [pc, #108]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001580:	4b1b      	ldr	r3, [pc, #108]	@ (80015f0 <HAL_RCC_OscConfig+0x4cc>)
 8001582:	2201      	movs	r2, #1
 8001584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001586:	f7ff fb07 	bl	8000b98 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800158e:	f7ff fb03 	bl	8000b98 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e03d      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015a0:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0f0      	beq.n	800158e <HAL_RCC_OscConfig+0x46a>
 80015ac:	e035      	b.n	800161a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ae:	4b10      	ldr	r3, [pc, #64]	@ (80015f0 <HAL_RCC_OscConfig+0x4cc>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff faf0 	bl	8000b98 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015bc:	f7ff faec 	bl	8000b98 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e026      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ce:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x498>
 80015da:	e01e      	b.n	800161a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d107      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e019      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40007000 	.word	0x40007000
 80015f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <HAL_RCC_OscConfig+0x500>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	429a      	cmp	r2, r3
 8001606:	d106      	bne.n	8001616 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001612:	429a      	cmp	r2, r3
 8001614:	d001      	beq.n	800161a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000

08001628 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0d0      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800163c:	4b6a      	ldr	r3, [pc, #424]	@ (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d910      	bls.n	800166c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164a:	4b67      	ldr	r3, [pc, #412]	@ (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 0207 	bic.w	r2, r3, #7
 8001652:	4965      	ldr	r1, [pc, #404]	@ (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	4313      	orrs	r3, r2
 8001658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800165a:	4b63      	ldr	r3, [pc, #396]	@ (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0b8      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d020      	beq.n	80016ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001684:	4b59      	ldr	r3, [pc, #356]	@ (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4a58      	ldr	r2, [pc, #352]	@ (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 800168a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800168e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800169c:	4b53      	ldr	r3, [pc, #332]	@ (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	4a52      	ldr	r2, [pc, #328]	@ (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80016a2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80016a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a8:	4b50      	ldr	r3, [pc, #320]	@ (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	494d      	ldr	r1, [pc, #308]	@ (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d040      	beq.n	8001748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d107      	bne.n	80016de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ce:	4b47      	ldr	r3, [pc, #284]	@ (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d115      	bne.n	8001706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e07f      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d107      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e6:	4b41      	ldr	r3, [pc, #260]	@ (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d109      	bne.n	8001706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e073      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f6:	4b3d      	ldr	r3, [pc, #244]	@ (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e06b      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001706:	4b39      	ldr	r3, [pc, #228]	@ (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f023 0203 	bic.w	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	4936      	ldr	r1, [pc, #216]	@ (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001718:	f7ff fa3e 	bl	8000b98 <HAL_GetTick>
 800171c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171e:	e00a      	b.n	8001736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001720:	f7ff fa3a 	bl	8000b98 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e053      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001736:	4b2d      	ldr	r3, [pc, #180]	@ (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 020c 	and.w	r2, r3, #12
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	429a      	cmp	r2, r3
 8001746:	d1eb      	bne.n	8001720 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001748:	4b27      	ldr	r3, [pc, #156]	@ (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d210      	bcs.n	8001778 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001756:	4b24      	ldr	r3, [pc, #144]	@ (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f023 0207 	bic.w	r2, r3, #7
 800175e:	4922      	ldr	r1, [pc, #136]	@ (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	4313      	orrs	r3, r2
 8001764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001766:	4b20      	ldr	r3, [pc, #128]	@ (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d001      	beq.n	8001778 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e032      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d008      	beq.n	8001796 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001784:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4916      	ldr	r1, [pc, #88]	@ (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 8001792:	4313      	orrs	r3, r2
 8001794:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d009      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017a2:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	490e      	ldr	r1, [pc, #56]	@ (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017b6:	f000 f821 	bl	80017fc <HAL_RCC_GetSysClockFreq>
 80017ba:	4602      	mov	r2, r0
 80017bc:	4b0b      	ldr	r3, [pc, #44]	@ (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	490a      	ldr	r1, [pc, #40]	@ (80017f0 <HAL_RCC_ClockConfig+0x1c8>)
 80017c8:	5ccb      	ldrb	r3, [r1, r3]
 80017ca:	fa22 f303 	lsr.w	r3, r2, r3
 80017ce:	4a09      	ldr	r2, [pc, #36]	@ (80017f4 <HAL_RCC_ClockConfig+0x1cc>)
 80017d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017d2:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <HAL_RCC_ClockConfig+0x1d0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff f99c 	bl	8000b14 <HAL_InitTick>

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40022000 	.word	0x40022000
 80017ec:	40021000 	.word	0x40021000
 80017f0:	08001984 	.word	0x08001984
 80017f4:	20000004 	.word	0x20000004
 80017f8:	20000008 	.word	0x20000008

080017fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b087      	sub	sp, #28
 8001800:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001816:	4b1e      	ldr	r3, [pc, #120]	@ (8001890 <HAL_RCC_GetSysClockFreq+0x94>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b04      	cmp	r3, #4
 8001824:	d002      	beq.n	800182c <HAL_RCC_GetSysClockFreq+0x30>
 8001826:	2b08      	cmp	r3, #8
 8001828:	d003      	beq.n	8001832 <HAL_RCC_GetSysClockFreq+0x36>
 800182a:	e027      	b.n	800187c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800182c:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <HAL_RCC_GetSysClockFreq+0x98>)
 800182e:	613b      	str	r3, [r7, #16]
      break;
 8001830:	e027      	b.n	8001882 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	0c9b      	lsrs	r3, r3, #18
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	4a17      	ldr	r2, [pc, #92]	@ (8001898 <HAL_RCC_GetSysClockFreq+0x9c>)
 800183c:	5cd3      	ldrb	r3, [r2, r3]
 800183e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d010      	beq.n	800186c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800184a:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <HAL_RCC_GetSysClockFreq+0x94>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	0c5b      	lsrs	r3, r3, #17
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	4a11      	ldr	r2, [pc, #68]	@ (800189c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001856:	5cd3      	ldrb	r3, [r2, r3]
 8001858:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a0d      	ldr	r2, [pc, #52]	@ (8001894 <HAL_RCC_GetSysClockFreq+0x98>)
 800185e:	fb03 f202 	mul.w	r2, r3, r2
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	fbb2 f3f3 	udiv	r3, r2, r3
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	e004      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a0c      	ldr	r2, [pc, #48]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001870:	fb02 f303 	mul.w	r3, r2, r3
 8001874:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	613b      	str	r3, [r7, #16]
      break;
 800187a:	e002      	b.n	8001882 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800187c:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <HAL_RCC_GetSysClockFreq+0x98>)
 800187e:	613b      	str	r3, [r7, #16]
      break;
 8001880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001882:	693b      	ldr	r3, [r7, #16]
}
 8001884:	4618      	mov	r0, r3
 8001886:	371c      	adds	r7, #28
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000
 8001894:	007a1200 	.word	0x007a1200
 8001898:	08001994 	.word	0x08001994
 800189c:	080019a4 	.word	0x080019a4
 80018a0:	003d0900 	.word	0x003d0900

080018a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018ac:	4b0a      	ldr	r3, [pc, #40]	@ (80018d8 <RCC_Delay+0x34>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0a      	ldr	r2, [pc, #40]	@ (80018dc <RCC_Delay+0x38>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	0a5b      	lsrs	r3, r3, #9
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	fb02 f303 	mul.w	r3, r2, r3
 80018be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018c0:	bf00      	nop
  }
  while (Delay --);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1e5a      	subs	r2, r3, #1
 80018c6:	60fa      	str	r2, [r7, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1f9      	bne.n	80018c0 <RCC_Delay+0x1c>
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	20000004 	.word	0x20000004
 80018dc:	10624dd3 	.word	0x10624dd3

080018e0 <memset>:
 80018e0:	4603      	mov	r3, r0
 80018e2:	4402      	add	r2, r0
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d100      	bne.n	80018ea <memset+0xa>
 80018e8:	4770      	bx	lr
 80018ea:	f803 1b01 	strb.w	r1, [r3], #1
 80018ee:	e7f9      	b.n	80018e4 <memset+0x4>

080018f0 <__libc_init_array>:
 80018f0:	b570      	push	{r4, r5, r6, lr}
 80018f2:	2600      	movs	r6, #0
 80018f4:	4d0c      	ldr	r5, [pc, #48]	@ (8001928 <__libc_init_array+0x38>)
 80018f6:	4c0d      	ldr	r4, [pc, #52]	@ (800192c <__libc_init_array+0x3c>)
 80018f8:	1b64      	subs	r4, r4, r5
 80018fa:	10a4      	asrs	r4, r4, #2
 80018fc:	42a6      	cmp	r6, r4
 80018fe:	d109      	bne.n	8001914 <__libc_init_array+0x24>
 8001900:	f000 f81a 	bl	8001938 <_init>
 8001904:	2600      	movs	r6, #0
 8001906:	4d0a      	ldr	r5, [pc, #40]	@ (8001930 <__libc_init_array+0x40>)
 8001908:	4c0a      	ldr	r4, [pc, #40]	@ (8001934 <__libc_init_array+0x44>)
 800190a:	1b64      	subs	r4, r4, r5
 800190c:	10a4      	asrs	r4, r4, #2
 800190e:	42a6      	cmp	r6, r4
 8001910:	d105      	bne.n	800191e <__libc_init_array+0x2e>
 8001912:	bd70      	pop	{r4, r5, r6, pc}
 8001914:	f855 3b04 	ldr.w	r3, [r5], #4
 8001918:	4798      	blx	r3
 800191a:	3601      	adds	r6, #1
 800191c:	e7ee      	b.n	80018fc <__libc_init_array+0xc>
 800191e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001922:	4798      	blx	r3
 8001924:	3601      	adds	r6, #1
 8001926:	e7f2      	b.n	800190e <__libc_init_array+0x1e>
 8001928:	080019b0 	.word	0x080019b0
 800192c:	080019b0 	.word	0x080019b0
 8001930:	080019b0 	.word	0x080019b0
 8001934:	080019b4 	.word	0x080019b4

08001938 <_init>:
 8001938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800193a:	bf00      	nop
 800193c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800193e:	bc08      	pop	{r3}
 8001940:	469e      	mov	lr, r3
 8001942:	4770      	bx	lr

08001944 <_fini>:
 8001944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001946:	bf00      	nop
 8001948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800194a:	bc08      	pop	{r3}
 800194c:	469e      	mov	lr, r3
 800194e:	4770      	bx	lr
